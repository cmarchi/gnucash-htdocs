<b>DWI</b>:  Data With Interaction
2003-10-02   15:21:14

Linas Vepstas writes:
<p>
<i>
I'm currently tearing up the guts of "DWI" 
<a href="http://dwi.sourceforge.net"> http://dwi.sourceforge.net</a>
DWI was originally (and still is) a way of 'quickly' developing glade
apps that are hooked to an SQL db.  I wrote a kind of tracking tool
using the thing for a client (tracking maintenance of pipes & pumps),
so DWI has been vetted with a 'real life' project.  I've been planning
on creating a whiz-bang open source bug tracker & etc with it, but
never got around to it.
</i></p.</p><i>
My tear-up of the guts of DWI is turning it into a generic 'data pump'.
It can suck data out of one place and stick it in somewhere else.
Originally, the two places it worked with are sql tables and gnome
widgets, but its in fact far more general than that.  In particular,
I'm planning on prototyping a hookup to the GnuCash objects (aka qof
objects) real soon now.  (which is why the qof objects get setters as
well as getters in the CVS tree).
</i></p.</p><i>
Part of the beauty of the thing is it does not force a 1-to-1 mapping
between SQL tables and objects.  The mappings can go any which way:
data from different sql tables can be joined and pushed out to various
assortments of widgets (including columned widgets such as ctree/clist).
So its kind of a realization of my long standing complaint that I should
be able to press a button, and bingo, some object turns into an SQL
record(s), and back.
</i></p.</p><i>
I'm not done with the DWI internal tearup yet, but soon ... After that,
I'll start prototyping integration with the qof objects (probably within
the DWI cvs tree).  When I'm done with that, I'm going to try to unleash
the thing to create teh backend for the GnuCash business Objects.  My
goal is to have very very little code for this: mostly, a specification
of the SQL tables, and a mapping: 'this business object field goes into
that sql field', and that's that.  The goal/side effect is that this
should make adding new objects to GnuCash backend 'real easy'.
Depending on how the above goes, I may or may not convert the existing
sql backend to use this new system.  Although not in my current set of
plans, note that DWI also offers a way of maybe simplifying the GUI
design as well, providing a way of hooking glade dialogs straight to
engine objects (and/or god forbid straight to sql). But that's really
not something I'm planning for right now.
</i></p>


